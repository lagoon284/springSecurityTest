spring.application.name=demo

#-------------------------------------------------------------------
# JSP \uC124\uC815
spring.mvc.static-path-pattern=/webapp/**
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#spring.web.resources.add-mappings=true
#-------------------------------------------------------------------

#-------------------------------------------------------------------
# H2 설정
spring.datasource.driver-class-name= org.h2.Driver
# In-Memory 방식, 영구적 데이터 아님.
#spring.datasource.url= jdbc:h2:mem:test
# Embedded 방식, 영구적 데이터. 비번 11
spring.datasource.url= jdbc:h2:~/test
spring.datasource.username= sa
spring.datasource.password= 11

# H2 db를 웹에서 관리할 수 있는 기능
# 사용여부
spring.h2.console.enabled= true
# H2 접속주소 (경로)
spring.h2.console.path= /h2-console
#-------------------------------------------------------------------

#-------------------------------------------------------------------
# jpa 설정
spring.jpa.datadase-platform= org.hibernate.dialect.H2Dialect
# DB auto DDL 설정 (none, create, create-drop, update, validate)
# none : 아무것도 하지않는다.
# create : 테이블이 없을 경우, 테이블 생성.
# create-drop : 테이블이 없을 경우, 테이블 생성. 프로젝트 종료할때 테이블 드롭.
# update : 이미 테이블이 존재하는 상황에서 속성이 추가될 경우 기존테이블의 데이터에 변화없이 새로운 column만 추가한다.
# validate : DDL 실행 없이 엔티티클래스와 테이블이 정상적으로 매핑되는지만 검사한다. 만약 테이블이 없거나 엔티티에 매핑되는 컬럼이 존재하지 않은면 예외발생.
spring.jpa.hibernate.ddl-auto= validate
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql= true
spring.jpa.properties.hibernate.show_sql= true
#-------------------------------------------------------------------




